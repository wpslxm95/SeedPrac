<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Donald Raab: Finding Symmetry</title>
	<guid isPermaLink="false">https://medium.com/p/27944c74b6d4</guid>
	<link>https://medium.com/@donraab/finding-symmetry-27944c74b6d4?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Evolving the design of &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; through symmetry.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*V20XrVJpyEhsPGcGFyDlwQ.png&quot; /&gt;Got Eclipse Collections stickers?&lt;/figure&gt;&lt;h3&gt;Find the Missing Types&lt;/h3&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/777/1*Gs6oL36CsN69d4aJPmBsag.png&quot; /&gt;New Eclipse Collections types on the left add to the existing JDK types on the right&lt;/figure&gt;&lt;p&gt;Eclipse Collections has a bunch of new types you will not find in the JDK. These types give developers useful functionality that they need. There is an extra cost to supporting additional container types, especially when you factor in having support for primitive types across these types.&lt;/p&gt;&lt;p&gt;These missing types are important. They help Eclipse Collections return better return types for iteration patterns.&lt;/p&gt;&lt;h3&gt;Type Symmetry&lt;/h3&gt;&lt;p&gt;Eclipse Collections has pretty good symmetry between object and primitive types.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/984/1*fqryL65gBdF6lRMdrY2G2w.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The missing container types are fixed sized primitive arrays, primitive BiMaps, primitive Multimaps, and some of the primitive Intervals (only IntInterval exists today). String really only should exist as a primitive immutable collection of either char or int. Eclipse Collections has &lt;em&gt;CharAdapter&lt;/em&gt;, &lt;em&gt;CodePointAdapter&lt;/em&gt; and &lt;em&gt;CodePointList&lt;/em&gt; which provide a rich set of iteration protocols that work with &lt;em&gt;Strings&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;API Symmetry&lt;/h3&gt;&lt;p&gt;There is still much that can be done to improve the symmetry between the object and primitive APIs. There are some APIs that cannot be replicated without adding new types. For instance, it would be less than desirable to implement a primitive version of groupBy with the current Multimap implementations because the only option would be to box the primitive &lt;em&gt;Lists&lt;/em&gt;, &lt;em&gt;Sets&lt;/em&gt; or &lt;em&gt;Bags&lt;/em&gt;. Since there are a large number of APIs in Eclipse Collections, I will only draw attention to some of the major APIs that do not currently have symmetry between object and primitive collections. The following methods are missing on the primitive iterables.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;groupBy / groupByEach&lt;/li&gt;&lt;li&gt;countBy / countByEach&lt;/li&gt;&lt;li&gt;aggregateBy / aggregateInPlaceBy&lt;/li&gt;&lt;li&gt;partition&lt;/li&gt;&lt;li&gt;reduce / reduceInPlace&lt;/li&gt;&lt;li&gt;toMap&lt;/li&gt;&lt;li&gt;&lt;strong&gt;All “With” methods&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Of all the missing APIs on primitive collections perhaps the most subtle and yet glaring difference is the lack of &lt;strong&gt;“With” &lt;/strong&gt;methods. It is not clear if the “With” methods would be as useful for primitive collections as they are with object collections. For some usage examples of the “With” methods on the object collection APIs, read my blog titled &lt;a href=&quot;https://medium.com/@donraab/preposition-preference-1f1c709b098b&quot;&gt;“Preposition Preference”&lt;/a&gt;. The “With” methods allow for more APIs to be used with Method References.&lt;/p&gt;&lt;p&gt;This is what the signatures for some of the “With” methods might look like on &lt;em&gt;IntList&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean anySatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean allSatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean noneSatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; IntList selectWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; IntList rejectWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;h3&gt;Default Methods to the Rescue&lt;/h3&gt;&lt;p&gt;The addition of default methods in Java 8 has been of tremendous help increasing the symmetry between our object and primitive APIs. In Eclipse Collections 10.x we will be able to leverage default methods even more, as we now have the ability to use container factory classes in interfaces. The following examples show how the default implementations of &lt;em&gt;countBy&lt;/em&gt; and &lt;em&gt;countByWith&lt;/em&gt; has been optimized using the &lt;em&gt;Bags&lt;/em&gt; factory.&lt;/p&gt;&lt;pre&gt;default &amp;lt;V&amp;gt; Bag&amp;lt;V&amp;gt; countBy(Function&amp;lt;? super T, ? extends V&amp;gt; function)&lt;br /&gt;{&lt;br /&gt;    return this.countBy(function, Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;default &amp;lt;V, P&amp;gt; Bag&amp;lt;V&amp;gt; countByWith(Function2&amp;lt;? super T, ? super P, ? extends V&amp;gt; function, P parameter)&lt;br /&gt;{&lt;br /&gt;    return this.countByWith(function, parameter,&lt;br /&gt;        Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;More on Eclipse Collections API design&lt;/h3&gt;&lt;p&gt;To find out more about the design of the &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; API, check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design/#/&quot;&gt;slide deck&lt;/a&gt; and the following presentation.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/2ab2cb59ae47379914362745e7bbc2ee/href&quot;&gt;https://medium.com/media/2ab2cb59ae47379914362745e7bbc2ee/href&lt;/a&gt;&lt;p&gt;You can also find a set of visualizations of the Eclipse Collection library in &lt;a href=&quot;https://medium.com/oracledevs/visualizing-eclipse-collections-646dad9533a9&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=27944c74b6d4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 27 Nov 2018 04:15:37 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: How is the Eclipse Foundation Specification Process (EFSP) different from Java Community Process (JCP)?</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6661 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/how-eclipse-foundation-specification-process-efsp-different-java-community</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;By now most of you are aware already that Oracle has contributed Java EE specification to open source, and into Eclipse Foundation. The Java enterprise community decided to rename the Java EE specification to Jakarta EE. Part of this huge transition to open source is changing the specification process. The famous Java Community Process (JCP) is going to be replaced by Eclipse Foundation Specification Process (EFSP), that will be better suited for vendor neutrality, transparency and all other attributes associated with open source. So what exactly is different?&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;There are many differences between Eclipse Foundation Specification Process (EFSP) and Java Community Process (JCP), but let’s focus on my top 5!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/o-4vx8ZpdhKclU4UkSA46Ymz4nhdV7xR7HuY_62LQQ9lOQDK_bcHgGeDDe20mgPQ4jDZ9AR1ikCd4au_yNFhzeCm-OfsafhKDVlRRxKuuwDfq0IOaNAK_6y873AXj4enq357lQBR&quot; style=&quot;float: left; height: 351px; width: 624px;&quot; /&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Code First&lt;/strong&gt;: While JCP proposed to have a Specification document created first, EFSP will be based on hands-on experimenting and coding first, as a way to prove something is worthy of documenting in a specification.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Collaborative&lt;/strong&gt;: EFSP is defined and managed by Jakarta EE Working Group members, which is governed as a vendor-neutral group, and will be used by the wider Jakarta community for a specification creation and implementation. Ensuring a level playing field for everyone in the WG to participate in Specification creation is done via collaboration.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Documents and TCKs are open &lt;/strong&gt;&lt;strong&gt;source&lt;/strong&gt;: The key benefits of EFSP are producing documents and TCKs that are open source. This means the following for the community: Transparency, Openness, Shared Burden and Vendor Neutrality. You can refer to this &lt;a href=&quot;https://blogs.eclipse.org/post/tanja-obradovic/java-ee-tck-now-open-sourced-eclipse-foundation&quot;&gt;open source TCK blog&lt;/a&gt; for additional insights. Opening the Specification to the community and having them influence the technical direction and provide feedback enables a large pool of people to get involved, which ultimately results in better quality! Transparency, openness, vendor neutrality were not part of the JCP.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Compatible Implementations&lt;/strong&gt;: The JCP required that each specification version have a corresponding Reference Implementation. EFSP will be requiring at least one Compatible Implementation of a specification, we are welcoming and encouraging other implementations of the specification and are avoiding singling out or favoring particular implementations or a vendor.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Self-certification&lt;/strong&gt;: The certification process for EFSP we utilize a self-serve model, thus lowering the costs and effort involved in carrying out certifications.  There is an explicit requirement for all test results to be made publicly available so verification can be carried out.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Specification processes’ are, by their nature, involved, detailed, and fairly complex.  Care has been taken to ensure the overhead associated with engaging in the spec process is no more significant than it needs to be.  But, we will learn as we progress, and expect to tweak the process further based on this ongoing learning.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We hope you’ll get involved!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-foundation-specification-process&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/efsp&quot;&gt;EFSP&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/java-community-process&quot;&gt;Java Community Process&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jcp&quot;&gt;jcp&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/java-ee&quot;&gt;java ee&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakarta-ee&quot;&gt;Jakarta EE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/specification&quot;&gt;Specification&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/specification-process&quot;&gt;Specification Process&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 26 Nov 2018 19:40:28 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process, Part II: the EFSP</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5460</guid>
	<link>https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/</link>
	<description>&lt;p&gt;The Eclipse Foundation Specification Process defines a general framework for developing specifications in open source at the Eclipse Foundation; it extends the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) by adding a few extra checks and balances. In the &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;first installment&lt;/a&gt; of this series, we described the EDP; in this second installment, we introduce the &lt;a href=&quot;https://www.eclipse.org/projects/efsp&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) with a focus on how it extends the EDP. We’ll provide more detail and tackle why it’s implemented as it is in future installments.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that we’re using the same form of pseudo-legal style capitalization of defined terms that we use in the EDP, EFSP, and other policy documents in this post.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Like regular Eclipse open source projects, a &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-projects&quot;&gt;Specification Project&lt;/a&gt;&lt;/em&gt; starts life as a &lt;em&gt;Proposal&lt;/em&gt; with a description, scope, list of committers, and more; goes through an iterative development cycle that produces one or more &lt;em&gt;Milestone builds&lt;/em&gt;; and then engages in a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release&quot;&gt;release process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;efsp_lifecycle&quot; class=&quot; size-full wp-image-5458 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/11/efsp_lifecycle1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Unlike a regular Project, a Specification Project must be aligned with exactly one Eclipse Foundation &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/&quot;&gt;Working Group&lt;/a&gt;&lt;/em&gt;. The Working Group designates a &lt;em&gt;Specification Committee&lt;/em&gt; that maintains and manages the specification process on the Working Group’s behalf (when we talk about &lt;em&gt;the&lt;/em&gt; Specification Committee in the context of a Specification Project, we mean the Specification Committee of the Working Group with which the Specification Project is aligned).&lt;/p&gt;
&lt;p&gt;A Specification Project must get approval from the corresponding Specification Committee to pass key project lifecycle events. In this regard, the role of the Specification Committee is very similar to the governance role of the Java Community Process’ (JCP) Executive Committee.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It’s worth noting that the EFSP provides the general framework for doing specifications in open source at the Eclipse Foundation and that we expect multiple Working Groups to leverage it for that purpose. We also fully expect that a Specification Committee will augment the process as it’s defined. We expect, for example, that we will have a &lt;a href=&quot;https://jakarta.ee/&quot;&gt;Jakarta EE&lt;/a&gt; Specification Process that uses the EFSP as its foundation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The Specification Committee needs to approve of the creation of a Specification Project from a Proposal by taking a role in the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;Creation Review&lt;/a&gt;. The expectation is that the Specification Committee members will consider the details of the proposed Specification Project (with particular focus on the &lt;em&gt;Scope&lt;/em&gt;) before making their decision. In addition to the requirements defined by the EDP, a Super-majority affirmative vote of the entire Specification Committee is required to approve a Creation Review.&lt;/p&gt;
&lt;p&gt;Following successful creation and provisioning of project resources, the Specification Project begins development. During the development cycle, the project team must produce at least one Milestone build of the specification’s content (documentation and technical artifacts) to solicit feedback, and at least one of the Milestone builds must serve as a trigger to engage in a &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-progress&quot;&gt;Progress Review&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Progress Reviews, a new addition to the EDP (introduced with the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/development_process_2018/&quot;&gt;2018 version&lt;/a&gt;), are roughly equivalent to &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-release&quot;&gt;Release Reviews&lt;/a&gt;, but with the intent of ensuring that the Specification Project is progressing in a manner that will ultimately result in a successful release. A Specification Committee and Project Leadership may compel a Specification Project to engage in additional Progress Reviews.&lt;/p&gt;
&lt;p&gt;For a Progress Review, the Project Management Committee (PMC), and Eclipse Management Organization (EMO) validate that the Project Team is following the EDP and EFSP, and that the Eclipse Foundation’s Intellectual Property Policy is being correctly implemented. The EFSP further requires that the Specification Committee approve a Progress Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;At the end of every release cycle, the project team must produce a &lt;em&gt;Release Candidate&lt;/em&gt; build that we label as a &lt;em&gt;Specification Version&lt;/em&gt; and then engages in a Release Review. For a Release Review, the PMC, EMO, and Specification Committee all engage in the same sorts of activities that they do for a Progress Review, but with the understanding that approval results in the ratification of the specification and promotion to an official status. The EFSP requires that the Specification Committee approve a Release Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;Following a successful Release Review, the final release version of the Specification Artifacts are considered &lt;em&gt;Ratified&lt;/em&gt; and morph into what the process refers to as a &lt;em&gt;Final Specification&lt;/em&gt;. It is the Final Specification that must be used to build Compatible Implementations.&lt;/p&gt;
&lt;p&gt;Following a successful first release (and every subsequent release thereafter), and before engaging in any further development of the specification, the project team must assemble and present their Plan for review by the Specification Committee via &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-plan&quot;&gt;Plan Review&lt;/a&gt;. The notion of a Plan Review is specific to the EFSP (since Plan Reviews are not part of the EDP, no formal involvement from the PMC is required). A Plan Review provides the Specification Committee with an opportunity to ensure that the plan for the next Specification Version is in-scope, fits within the overall vision of the Working Group, and is otherwise charting a path to eventual ratification and release. The EFSP requires that the Specification Committee approve a Plan Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;After the Plan is approved, the Project Team engages in Development as before.&lt;/p&gt;
&lt;p&gt;We’ll discuss the relationship between Specification Projects, Working Groups, and Specification Committees; what happens when the Specification Committee does not approve a vote; the relationship between a Specification Version and Final Specification; and more in future posts.&lt;/p&gt;
&lt;p&gt;Mike and I delivered a talk about this at EclipseCon Europe 2018, titled “&lt;a href=&quot;https://www.eclipsecon.org/europe2018/sessions/directors-pick-introducing-eclipse-foundation-specification-process&quot;&gt;Introducing The Eclipse Foundation Specification Process&lt;/a&gt;” (or go directly to &lt;a href=&quot;https://www.youtube.com/watch?v=rZ3zx2UAG9c&amp;amp;list=PLy7t4z5SYNaQ82WyePL05PFwqNmfTxhwD&amp;amp;index=93&quot;&gt;the video&lt;/a&gt; on our YouTube Channel).&lt;/p&gt;
		&lt;div class=&quot;wpcnt&quot;&gt;
			&lt;div class=&quot;wpa wpmrec&quot;&gt;
				&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;
				&lt;div class=&quot;u&quot;&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-right: 5px; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-26942-5bfc3226ab80e&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;		&lt;div style=&quot;padding-bottom: 15px; width: 300px; height: 250px; float: left; margin-top: 0px;&quot;&gt;
		&lt;div id=&quot;atatags-114160-5bfc3226ab810&quot;&gt;
			
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
				
			&lt;/div&gt;
		&lt;/div&gt;</description>
	<pubDate>Mon, 26 Nov 2018 17:49:15 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: CDT has been reformatted!</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=3292</guid>
	<link>https://kichwacoders.com/2018/11/24/cdt-has-been-reformatted/</link>
	<description>&lt;p&gt;Eclipse CDT has just had all its source code &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=540373&quot;&gt;reformatted&lt;/a&gt;. That means I just pushed a massive set of commits with a huge git shortstat:&lt;/p&gt;
&lt;pre&gt;$ git diff --shortstat  3cf0297769..HEAD
 10806 files changed, 697885 insertions(+), 593225 deletions(-)&lt;/pre&gt;
&lt;p&gt;That also means that any commit/patch you have on CDT before the reformat will almost certainly not apply cleanly.&lt;/p&gt;
&lt;p&gt;Therefore I have created this guide for you to reformat your commit and make it easier for you to submit your updated patch to gerrit.&lt;/p&gt;
&lt;p&gt;To be able to rebase your commit onto the current master you need to create a version of it with the new formatting. At a high-level the steps we are going to do are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reformat your commit with CDT’s new coding style&lt;/li&gt;
&lt;li&gt;Create a commit against the pre-formatted CDT that has only the files your commit changed formatted – but without your other changes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The diff between 1 and 2 above is an updated version of the diff for your real change.&lt;/p&gt;
&lt;p&gt;Step-by-step this breaks down as:&lt;/p&gt;
&lt;h1&gt;Pre-requisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Modern bash shell with sed, awk, grep, git, python, etc
&lt;ul&gt;
&lt;li&gt;I am using Ubuntu 18.04 LTS and python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eclipse &lt;a href=&quot;https://www.eclipse.org/ease/&quot;&gt;EASE&lt;/a&gt; with Py4J Python language support
&lt;ul&gt;
&lt;li&gt;p2 site is &lt;a href=&quot;http://download.eclipse.org/ease/update/release&quot;&gt;http://download.eclipse.org/ease/update/release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install the following features&lt;/li&gt;
&lt;li&gt;EASE Language Support -&amp;gt; EASE Py4J Support (Incubation)&lt;/li&gt;
&lt;li&gt;EASE Modules -&amp;gt; Ease Modules (Incubation)&lt;/li&gt;
&lt;li&gt;I am using EASE 0.6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eclipse workspace setup for CDT development, follow the standard setup on the &lt;a href=&quot;https://wiki.eclipse.org/Getting_started_with_CDT_development&quot;&gt;wiki&lt;/a&gt; and perform these extra steps:
&lt;ul&gt;
&lt;li&gt;Import &lt;a href=&quot;https://git.eclipse.org/c/cdt/org.eclipse.cdt.git/tree/releng/scripts/formattersettings.xml&quot;&gt;releng/scripts/formattersettings.xml&lt;/a&gt; Java formatter settings and set active profile to CDT&lt;/li&gt;
&lt;li&gt;Import &lt;a href=&quot;https://git.eclipse.org/c/cdt/org.eclipse.cdt.git/tree/releng/scripts/cleanupsettings.xml&quot;&gt;releng/scripts/cleanupsettings.xml&lt;/a&gt; Java Clean Up settings and set active profile to CDT&lt;/li&gt;
&lt;li&gt;In Clean Up preferences uncheck the “Show profile selection dialog for the ‘Source &amp;gt; Clean Up’ Action”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy &lt;a href=&quot;https://git.eclipse.org/c/cdt/org.eclipse.cdt.git/tree/releng/scripts/cleanup.py&quot;&gt;releng/scripts/cleanup.py&lt;/a&gt; somewhere outside of your gitroot so you can access it as the branches change later&lt;/li&gt;
&lt;li&gt;Set ECLIPSE environment variable to path to eclipse on your machine to make some of the commands below easier to copy/paste&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Step 1: Checkout the commit to rebase&lt;/h1&gt;
&lt;p&gt;First step is to checkout in CDT repo the commit you want to rebase onto current master. For example if you are updating a &lt;a href=&quot;https://git.eclipse.org/r/#/c/131664/7&quot;&gt;commit in gerrit&lt;/a&gt;, you could press Download in the top right and copy/paste the &lt;em&gt;Checkout&lt;/em&gt; command:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;download&quot; class=&quot;aligncenter size-medium wp-image-3294&quot; height=&quot;142&quot; src=&quot;https://kichwacoders.files.wordpress.com/2018/11/download1.png?w=300&amp;amp;h=142&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;Step 2: Reformat commit to new style&lt;/h1&gt;
&lt;p&gt;Start by creating a new branch to work on:&lt;/p&gt;
&lt;pre&gt;git checkout -b commit_to_rebase&lt;/pre&gt;
&lt;div&gt;
&lt;div&gt;Then rebase your change onto commit 35996a5c5ca, where all the per-project formatter settings have been applied, but the code has not been formatted yet. If your original commit is not too far behind this will finish without conflicts. If you have any conflicts, resolve them now.&lt;/div&gt;
&lt;pre&gt;git rebase 35996a5c5ca5c254959ba48241eaada6dbf8628d&lt;/pre&gt;
&lt;p&gt;Reformat the code to current standard using the following steps:&lt;/p&gt;
&lt;h2&gt;Step 2a: Close open editors in Eclipse&lt;/h2&gt;
&lt;p&gt;The EASE script will run on all open editors, so make sure to start with no open editors.&lt;/p&gt;
&lt;h2&gt;Step 2b: Open all the Java files modified in your commit&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;Using git’s &lt;a href=&quot;https://git-scm.com/docs/git-diff-tree&quot;&gt;diff-tree&lt;/a&gt; command we can get all the Java files as a list and then open them with Eclipse.&lt;/div&gt;
&lt;pre&gt;git diff-tree --no-commit-id --name-only -r commit_to_rebase -- *.java | xargs $ECLIPSE&lt;/pre&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h2&gt;Step 2c: Run cleanup.py&lt;/h2&gt;
&lt;p&gt;With Eclipse EASE run cleanup.py:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new Run Launch Configuration of type &lt;em&gt;EASE Script&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;Script Source&lt;/em&gt; browse the filesystem to where you saved cleanup.py earlier&lt;/li&gt;
&lt;li&gt;Ensure &lt;em&gt;Execution Engine&lt;/em&gt; is set to &lt;em&gt;Python (Py4J)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Press &lt;em&gt;Run&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each open editor will have the clean up actions run, and then be closed.&lt;/p&gt;
&lt;h2&gt;Step 2d: Remove trailing whitespace in files&lt;/h2&gt;
&lt;p&gt;CDT’s code standards require trailing whitespace to be removed from all files marked with &lt;em&gt;remove trailing whitespace &lt;/em&gt;in &lt;a href=&quot;https://git.eclipse.org/c/cdt/org.eclipse.cdt.git/tree/.gitattributes&quot;&gt;.gitattributes&lt;/a&gt;. To do this, run this bit of shell:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;git show master:.gitattributes | awk '/# remove trailing whitespace/{getline; print $1}' |
    while read i ; do
        echo &quot;Removing trailing whitespace on $i files&quot;
        git diff-tree --no-commit-id --name-only -r commit_to_rebase -- &quot;$i&quot; | xargs --no-run-if-empty sed -i 's/[ \t]*$//'
    done&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;Step 2e: Save/commit cleanup changes&lt;/h2&gt;
&lt;div&gt;Update the change to now contain the formatted files.&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;git add -u
git commit --amend --reuse-message=HEAD&lt;/pre&gt;
&lt;/div&gt;
&lt;h1&gt;Step 3: Create a base commit to compare against&lt;/h1&gt;
&lt;div&gt;
&lt;div&gt;In this step create a commit that has only the files modified in the original commit cleaned up, but no other ones. This will be the base for the diff we create later.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;h2&gt;Step 3a: Create a new branch&lt;/h2&gt;
&lt;p&gt;Start by checking out to a new branch the same commit as above with the formatter settings&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;git checkout 35996a5c5ca5c254959ba48241eaada6dbf8628d -b commit_to_format&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;Step 3b: Cleanup the modified files&lt;/h2&gt;
&lt;p&gt;Repeat Step 2a to Step 2d above to cleanup the files.&lt;/p&gt;
&lt;h2&gt;Step 3c: Save/commit cleanup changes&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div&gt;Save the files which are now formatted, but without the change you wish to rebase in a commit&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;git add -u
git commit -m&quot;formatted files&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Step 4: Create a new commit that can be cherry-picked to master&lt;/h1&gt;
&lt;div&gt;
&lt;div&gt;Apply the change so you have a history on commit_to_format branch that is two ahead of 35996a5c5c, the first being the formatted files created in step 3, the second being the change we are trying to get onto master, which will be created now&lt;/div&gt;
&lt;h2&gt;Step 4a: Diff and apply the change&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;Diff the two branches we just made, that diff is the real work you are trying to get on master, and apply that diff&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;git diff commit_to_format..commit_to_rebase | git apply&lt;/pre&gt;
&lt;h2&gt;Step 4b: Commit the change&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;Save the edit, reusing your original commit message (and therefore Change-Id!)&lt;/div&gt;
&lt;div&gt;
&lt;pre&gt;git add -u
git commit --reuse-message=commit_to_rebase&lt;/pre&gt;
&lt;h1&gt;Step 5: Cherry-pick the new commit onto master&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;You now have a commit, marked with &lt;em&gt;commit_to_format&lt;/em&gt;, that can be cherry-picked onto master. If other commits have made a conflicting edit since the reformat you may have some conflicts to resolve when you do this cherry-pick&lt;/div&gt;
&lt;pre&gt;git checkout master
git cherry-pick commit_to_format&lt;/pre&gt;
&lt;h1&gt;Step 6: Push commit to gerrit&lt;/h1&gt;
&lt;p&gt;Push your commit now that it is ready, if you are using gerrit you can do:&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;background-color: #f3f6f8; font-family: Monaco, Consolas, 'Andale Mono', 'DejaVu Sans Mono', 'Courier 10 Pitch', Courier, monospace;&quot;&gt;git push origin master:refs/for/master&lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;Step 7: Clean up your branches&lt;/h1&gt;
&lt;p&gt;Once you are done make sure to remove the branches you don’t need anymore.&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;git branch -D commit_to_rebase
git branch -D commit_to_format&lt;/pre&gt;
&lt;/div&gt;
&lt;h1&gt;All done!&lt;/h1&gt;
&lt;p&gt;And that is it. Hopefully you have now recreated your patch with just a few automated steps, instead of a painful manual copy+paste job. These instructions are also in the CDT repo in &lt;a href=&quot;https://git.eclipse.org/c/cdt/org.eclipse.cdt.git/tree/releng/scripts/rebase_helper.sh&quot;&gt;releng/scripts/rebase_helper.sh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This set of steps shows that there are still some more automatable things that could be done. In particular being able to run Code Clean Ups from the command line in Eclipse would be really nice. Eclipse’s Java code formatter can be &lt;a href=&quot;https://help.eclipse.org/2018-09/topic/org.eclipse.jdt.doc.user/tasks/tasks-231.htm?cp=1_3_10_0&quot;&gt;run from the command line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And finally, join in on the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/cdt-dev&quot;&gt;cdt-dev&lt;/a&gt; mailing list!&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Sun, 25 Nov 2018 14:09:54 +0000</pubDate>
</item>
<item>
	<title>N4JS: Short-Circuit Evaluation in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-761854849853353188</guid>
	<link>https://n4js.blogspot.com/2018/10/short-circuit-evaluation-in-n4js_17.html</link>
	<description>&lt;h4&gt;Short-circuit evaluation is a popular feature of many programming languages and also part of N4JS. In this post, we show how the control-flow analysis of the N4JS-IDE deals with short-circuit evaluation, since it can have a substantial effect on the data flow and execution of a program.&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-g6wjXUt3sao/W8buQnfTrcI/AAAAAAAAADk/kAsgHzdkJ1UFfWKwj-MvMgyk5_d09iwtACLcBGAs/s1600/introduction.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-g6wjXUt3sao/W8buQnfTrcI/AAAAAAAAADk/kAsgHzdkJ1UFfWKwj-MvMgyk5_d09iwtACLcBGAs/s1600/introduction.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Short circuit evaluation is a means to improve runtime performance when evaluating boolean expressions. This improvement is a result of skipping code execution. The example above shows an &lt;span&gt;if&lt;/span&gt;-statement whose condition consists of two boolean expressions that combine the values of &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; and &lt;span&gt;3,&lt;/span&gt; and its control flow graph. Note that the number literals are placeholders for more meaningful subexpressions.&lt;br /&gt;&lt;br /&gt;First the &lt;i&gt;logical and&lt;/i&gt;, then the &lt;i&gt;logical or&lt;/i&gt; gets evaluated: &lt;span&gt;(1 &amp;amp;&amp;amp; 2) || 3&lt;/span&gt;. In case the expression &lt;span&gt;1 &amp;amp;&amp;amp; 2&lt;/span&gt; evaluates to true, the evaluation of the subclause &lt;span&gt;3&lt;/span&gt; will be skipped and the evaluation of the entire condition results to true. This skipping of nested boolean expressions is called &lt;i&gt;short circuit evaluation&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;However, instead of skipping expression &lt;span&gt;3&lt;/span&gt;, expression &lt;span&gt;2&lt;/span&gt; might be skipped. In case condition &lt;span&gt;1&lt;/span&gt; does not hold, the control flow will continue with condition &lt;span&gt;3&lt;/span&gt; right away. This control flow completely takes places within the if-condition, whereas the former short circuit targets the then block.&lt;br /&gt;&lt;br /&gt;The reasoning behind short circuit evaluation is  that the skipped code does not affect the result of the whole boolean  expression. If the left hand side of the logical or expression evaluates  to true, the whole or expression also does. Only if the left hand side  is false, the right hand side will be evaluated. Complementary, the  right hand side of a logical and expression is skipped in case the left  hand side evaluates to false.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Side Effects&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Risks of short circuit evaluation might arise in case a subexpression has side effects: These side effects will not occur if the subexpression is skipped. However, a program that relies on side effects of expressions inside an &lt;span&gt;if&lt;/span&gt;-condition can be called fragile (or adventurous). In any case it is recommended to write side-effect free conditions.&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-0JcnBeJ-1Rk/W8buRqUWCvI/AAAAAAAAADw/zYwwORwyclEdUHm5HQex4aKR5UPHlATIACLcBGAs/s1600/side_effects.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-0JcnBeJ-1Rk/W8buRqUWCvI/AAAAAAAAADw/zYwwORwyclEdUHm5HQex4aKR5UPHlATIACLcBGAs/s1600/side_effects.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Have a look at the example above. In case variable &lt;span&gt;i&lt;/span&gt; has a value of zero, the right hand side expression &lt;span&gt;i++&lt;/span&gt; is executed, otherwise, it is skipped. The side effect here is the post-increment the value of &lt;span&gt;i&lt;/span&gt;. If the value of &lt;span&gt;i&lt;/span&gt; is other than zero, this value will be printed out. Otherwise, the value will be incremented but not printed. The control flow shows this behavior with the edge starting at &lt;span&gt;i&lt;/span&gt; and targeting the symbol &lt;span&gt;console&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Loops&lt;/h4&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-1L_PrkVxmYg/W8buQulSsEI/AAAAAAAAADc/Dh9U1bA9ZboCQP52QjjPIync_DTyJL2AQCLcBGAs/s1600/loops.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-1L_PrkVxmYg/W8buQulSsEI/AAAAAAAAADc/Dh9U1bA9ZboCQP52QjjPIync_DTyJL2AQCLcBGAs/s1600/loops.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Loop conditions also benefit from short circuit evaluation. This is important to know when reasoning about the all possible control flow paths through the loop: Each short circuit will introduce another path. Combining all of them makes data flow in loops difficult to understand in case of side effects in the subconditions.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Creative use of short circuit evaluation&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;Misusing short circuit evaluation can mimic if-statements by using  expressions but without using  the language feature of conditional expressions (i.e. &lt;span&gt;condition() ? then() : else()&lt;/span&gt;). This could be used when if-statements should be executed e.g. when passing  arguments to method calls, or when computing the update part of  for-loops.&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-bQAq2BWre9s/W8buRTY5OJI/AAAAAAAAADo/uzZ-OqHynNcfrh1k6jYMVbN2MkhiI9xtQCLcBGAs/s1600/modelling.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot; width=&quot;575&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-bQAq2BWre9s/W8buRTY5OJI/AAAAAAAAADo/uzZ-OqHynNcfrh1k6jYMVbN2MkhiI9xtQCLcBGAs/s1600/modelling.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The picture above shows the two versions: the first uses an if-statement and the second uses an  expression statement. These two statements call the functions &lt;span&gt;condition&lt;/span&gt;, &lt;span&gt;then&lt;/span&gt; and &lt;span&gt;end&lt;/span&gt;. Depending on the return value of &lt;span&gt;condition&lt;/span&gt;, the function &lt;span&gt;then&lt;/span&gt; is  executed or not. Consequently, the printouts are either &quot;condition then  end&quot; or &quot;condition end&quot;, depending on the control flow.&lt;br /&gt;&lt;br /&gt;The corresponding control flows are depicted on the right: The upper three lines refer to the if-statement, and the lower three lines to the expression statement. They reveal that the expression statement  behaves similar to the if-statement. Note that the control flow edge  in the last line that skips the nodes &lt;span&gt;end&lt;/span&gt; and &lt;span&gt;end()&lt;/span&gt; is never traversed since the logical or expression always evaluates to true.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The interested reader would find more details about the N4JS flow graphs and their implementation in the &lt;a href=&quot;https://github.com/eclipse/n4js/blob/master/docs/org.eclipse.n4js.design/chapters/10_flowgraphs/flowgraphs.adoc&quot; target=&quot;_blank&quot;&gt;N4JS Design Document, Chapter: Flow Graphs.&lt;/a&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;</description>
	<pubDate>Sun, 25 Nov 2018 11:18:47 +0000</pubDate>
	<author>noreply@blogger.com (Project N4JS)</author>
</item>
<item>
	<title>N4JS: Control flow graphs in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-6918804310889311198</guid>
	<link>https://n4js.blogspot.com/2018/08/control-flow-graphs-in-n4js_29.html</link>
	<description>&lt;h4&gt;&lt;b&gt;The N4JS IDE comes with several tools to get insights into the source code such as the AST and the control flow. In this post we present the control flow graph view.&lt;/b&gt;&lt;/h4&gt;&lt;div&gt;&lt;span style=&quot;font-size: x-small; text-align: right;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-cAOdKALRBYk/W4Z-xpbOwvI/AAAAAAAAADQ/ifSTKJstjR82v8W2CAvcmWFKYgHl80DdgCEwYBhgL/s1600/N4JS-IDE.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-cAOdKALRBYk/W4Z-xpbOwvI/AAAAAAAAADQ/ifSTKJstjR82v8W2CAvcmWFKYgHl80DdgCEwYBhgL/s1600/N4JS-IDE.png&quot; width=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;When learning a programming language, we probably start with a small &lt;i&gt;Hello World!&lt;/i&gt; program. From there on, we learn not only language keywords and libraries, but also get an implicit understanding in which order statements and expressions are executed. This order is called &lt;i&gt;control flow&lt;/i&gt;. For instance, we learn the effects of &lt;span&gt;if&lt;/span&gt; and &lt;span&gt;for&lt;/span&gt; statements which are also called &lt;i&gt;control statements&lt;/i&gt;, since they have a big influence on the execution order. The most difficult statement in this respect is probably the &lt;span&gt;try-finally&lt;/span&gt; control statement, which is explained later.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Hello World&lt;/h3&gt;&lt;span&gt;&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;function&lt;/span&gt;&lt;/b&gt; f() {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;  &lt;/span&gt;console.log(&lt;span style=&quot;color: #38761d;&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Let's have a look at the &lt;i&gt;Hello World!&lt;/i&gt; from a control flow perspective, first. The source code of &lt;i&gt;Hello World!&lt;/i&gt; is simple, but it already consists of three important elements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;the method call &lt;span&gt;console.log&lt;/span&gt;,&lt;/li&gt;&lt;li&gt;the nested argument &lt;span&gt;&quot;Hello World!&quot;&lt;/span&gt;, and&lt;/li&gt;&lt;li&gt;the function body of &lt;span&gt;f()&lt;/span&gt; which contains the two elements mentioned above.&lt;/li&gt;&lt;/ul&gt;The function body is also called &lt;i&gt;control flow container&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-qOAz5PlWg4c/W4Z-wS4-1wI/AAAAAAAAADM/jQqFTmlDPLgp-0TWRPLuh6U8VtIDTDnWACEwYBhgL/s1600/CFG_HelloWorld.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-qOAz5PlWg4c/W4Z-wS4-1wI/AAAAAAAAADM/jQqFTmlDPLgp-0TWRPLuh6U8VtIDTDnWACEwYBhgL/s1600/CFG_HelloWorld.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The image above shows the control flow graph of the &lt;i&gt;Hello World!&lt;/i&gt; example. The method call is separated into the receiver and its property &lt;span&gt;log&lt;/span&gt;. The next element the control flow goes to is the argument &lt;span&gt;&quot;Hello World!&quot;&lt;/span&gt; until it reaches the method call of &lt;span&gt;log&lt;/span&gt; as the final element.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Loops&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The example above showed the succeeding control flow of some code elements. This control flow gets more interesting in statements that introduce branches such as loop statements do. In the example below, the control flow of a &lt;span&gt;for&lt;/span&gt;-loop is shown. To indicate the start and end of the function, and also the body of the loop, the function calls &lt;span&gt;start()&lt;/span&gt;, &lt;span&gt;loop()&lt;/span&gt; and &lt;span&gt;end()&lt;/span&gt; are used.&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;function&lt;/span&gt;&lt;/b&gt; f() {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;  &lt;/span&gt;start();&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;  &lt;/span&gt;&lt;span style=&quot;color: #660000; font-weight: bold;&quot;&gt;for&lt;/span&gt; (&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;var&lt;/span&gt;&lt;/b&gt; &lt;span style=&quot;color: #783f04;&quot;&gt;i&lt;/span&gt;=&lt;span style=&quot;color: #0b5394;&quot;&gt;0&lt;/span&gt;; &lt;span style=&quot;color: #783f04;&quot;&gt;i&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #0b5394;&quot;&gt;2&lt;/span&gt;; &lt;span style=&quot;color: #783f04;&quot;&gt;i&lt;/span&gt;++) {&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;loop();&lt;/span&gt;&lt;br /&gt;&lt;span&gt;  }&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;  &lt;/span&gt;end();&lt;/span&gt;&lt;br /&gt;&lt;span&gt;}&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-zC8r0Ekgkjs/W4Z-wgteq8I/AAAAAAAAADE/bCidfaEh2tQuUxrg8N0P4-yNVCvbFfajgCEwYBhgL/s1600/CFG_ForLoop.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-zC8r0Ekgkjs/W4Z-wgteq8I/AAAAAAAAADE/bCidfaEh2tQuUxrg8N0P4-yNVCvbFfajgCEwYBhgL/s1600/CFG_ForLoop.png&quot; width=&quot;450&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;The control flow of the loop example shows branches and merges. After the condition &lt;span&gt;i&amp;lt;2&lt;/span&gt;, either the body is entered via the edge named &lt;i&gt;LoopEnter&lt;/i&gt;, or the loop is exited. In case the body was entered, the control flow first targets the call to &lt;span&gt;loop()&lt;/span&gt; and then goes back to the entry of the condition.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Try-Finally&lt;/h3&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-lvDj2f4FAoQ/W4Z-w4agiiI/AAAAAAAAADM/OVSbV6kSJBcT0PtYYcpCPRav7RtTAYF5ACEwYBhgL/s1600/CFG_TryFinally.png&quot; style=&quot;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-lvDj2f4FAoQ/W4Z-w4agiiI/AAAAAAAAADM/OVSbV6kSJBcT0PtYYcpCPRav7RtTAYF5ACEwYBhgL/s1600/CFG_TryFinally.png&quot; width=&quot;150&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;Finally blocks have tricky semantics since they can be entered and exited in two specific ways: normally and abruptly. Abrupt control flow occurs after a &lt;span&gt;return&lt;/span&gt;, &lt;span&gt;continue&lt;/span&gt;, &lt;span&gt;break&lt;/span&gt; or &lt;span&gt;throw&lt;/span&gt; statement. These will introduce a jump that targets either the end of the function or the entry of a finally block. In case the control flow jumps to a finally block, this finally block will be executed normally. However, since the block was entered abruptly, it will exit abruptly again. This means, that there will be a second jump from the exit of the finally block to either the end of function or the entry of the next finally block.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The following example shows this behaviour by using some dead code elements, which have a grey background colour in the graph image. These dead code elements are not reachable, since there is no normal control flow path that exits the try block.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;function&lt;/span&gt;&lt;/b&gt; t() {&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;&quot;start&quot;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;color: #660000; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;b style=&quot;color: #660000;&quot;&gt;try&lt;/b&gt;&lt;/span&gt; {&lt;br /&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;        &lt;/span&gt;2&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;color: #660000; white-space: pre;&quot;&gt;        &lt;/span&gt;&lt;b style=&quot;color: #660000;&quot;&gt;return&lt;/b&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;        &lt;/span&gt;3&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;    } &lt;span style=&quot;color: #660000;&quot;&gt;&lt;b&gt;finally&lt;/b&gt;&lt;/span&gt; {&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;        &lt;/span&gt;&quot;finally&quot;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;    &lt;span style=&quot;color: #38761d;&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Final catch&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;In case you ever wondered how a thrown exception can be caught without using a catch block, have a look at the final example. It is true that once a finally block was entered abruptly, it can only be exited abruptly. However, the kind of abrupt control flow might be changed. In the example below, it is changed from throwing an exception to breaking the loop. Of course, after the loop was exited due to the &lt;span&gt;break&lt;/span&gt; statement, the control flow is normal again and the thrown exception remains without effect. Hence, the last statement &lt;span&gt;&quot;end&quot;&lt;/span&gt; is executed which would have been skipped otherwise.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-E1VpO3JZ2ow/W4Z-wfHi1xI/AAAAAAAAADI/SWJFeScEQWg6WtYq9MgJvX_PekAqP7F1QCEwYBhgL/s1600/CFG_ThrowToBreak.png&quot; style=&quot;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-E1VpO3JZ2ow/W4Z-wfHi1xI/AAAAAAAAADI/SWJFeScEQWg6WtYq9MgJvX_PekAqP7F1QCEwYBhgL/s1600/CFG_ThrowToBreak.png&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: #660000;&quot;&gt;function&lt;/span&gt;&lt;/b&gt; t() {&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;&quot;start&quot;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;do&lt;/b&gt;&lt;/span&gt; {&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;   &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;try&lt;/b&gt;&lt;/span&gt; {&lt;br /&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;&lt;span style=&quot;color: #0b5394;&quot;&gt;2&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;throw&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: #38761d;&quot;&gt;&quot;exception&quot;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;} &lt;span style=&quot;color: #660000;&quot;&gt;&lt;b&gt;finally&lt;/b&gt;&lt;/span&gt; {&lt;br /&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #660000;&quot;&gt;&lt;b style=&quot;color: #660000;&quot;&gt;break&lt;/b&gt;&lt;/span&gt;;&lt;br /&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;}&lt;br /&gt;&lt;span style=&quot;color: #38761d; white-space: pre;&quot;&gt;    &lt;/span&gt;} &lt;span style=&quot;color: #660000;&quot;&gt;&lt;b&gt;while&lt;/b&gt;&lt;/span&gt; (&lt;span style=&quot;color: #0b5394;&quot;&gt;4&lt;/span&gt;);&lt;br /&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;color: #38761d;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;    &lt;/span&gt;&quot;end&quot;&lt;/span&gt;&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The interested reader would find more details about the N4JS flow graphs and their implementation in the &lt;a href=&quot;https://github.com/eclipse/n4js/blob/master/docs/org.eclipse.n4js.design/chapters/10_flowgraphs/flowgraphs.adoc&quot; target=&quot;_blank&quot;&gt;N4JS Design Document, Chapter: Flow Graphs.&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 25 Nov 2018 11:18:32 +0000</pubDate>
	<author>noreply@blogger.com (Project N4JS)</author>
</item>
<item>
	<title>N4JS: Null/Undefined Analysis in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-875574530099273704</guid>
	<link>https://n4js.blogspot.com/2018/09/nullundefined-analysis-in-n4js_20.html</link>
	<description>&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;b&gt;The N4JS IDE integrates validations and analyses that are quite common for IDEs of statically typed languages. However, these analyses are seldom available for dynamically typed languages like N4JS or TypeScript. In this post we present the null/undefined analysis for N4JS source code.&lt;/b&gt;&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span&gt;TypeError: Cannot read property of undefined&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;- Developer's staff of life&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The runtime error above occurs pretty often for JavaScript programmers: A quick search on Google returned about 1.2 million for the term &lt;i&gt;TypeError: Cannot read property of undefined&lt;/i&gt;. When constraining search results to &lt;i&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;site:stackoverflow.com&lt;/span&gt;&lt;/i&gt; the query will still yield 126 thousand results. These numbers are comparable to the somewhat similar error &lt;i&gt;NullPointerException&lt;/i&gt; which has about 3 million hits on Google and about 525 thousand when constrained to stackoverflow.com. Some of these results are caused by rather simple mistakes that a null/undefined analysis could detect. As a result, the developer could restructure his code and remove these potential errors even before he runs his first test and hence save time.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Null/Undefined Analysis&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;The N4JS IDE provides static analyses to indicate problems when it detects a property access on a variable which can be null or undefined. The analysis considers all assignments that occur either through a simple assignment expression or via destructuring. Loops, conditional expressions (e.g. &lt;span&gt;i = c? 1 : 0;&lt;/span&gt;) and declaration initializers are respected as well.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-2MLOhdP3dEk/W3_Cnrj20zI/AAAAAAAAAIU/VD7GMOKA5RkedjFYi2nhKfW2pHKtn2BLACEwYBhgL/s1600/N4JS-IDE.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-2MLOhdP3dEk/W3_Cnrj20zI/AAAAAAAAAIU/VD7GMOKA5RkedjFYi2nhKfW2pHKtn2BLACEwYBhgL/s1600/N4JS-IDE.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The screenshot above shows a first example where a potential TypeError is detected. Since there exists at least one control flow from &lt;span&gt;v.length&lt;/span&gt; backwards to all reachable definitions of &lt;span&gt;v&lt;/span&gt;,  such that one definition assigns null or undefined to &lt;span&gt;v&lt;/span&gt;, a warning is issued telling that &lt;span&gt;v&lt;/span&gt; may be undefined.&lt;br /&gt;&lt;br /&gt;To make sure that the analysis will produce fast results, it is implemented within some limitations. One is that the analysis is done separately for each body of a function, method, etc. (i.e. &lt;i&gt;intra-procedural&lt;/i&gt; analysis). Hence it lacks knowledge of variables that cross the borders of these bodies such as the return value of a nested function call. In addition, property variables (such as &lt;span&gt;v.length&lt;/span&gt;) are not analyzed since this would require the analysis to be context sensitive to the receiver object (here &lt;span&gt;v&lt;/span&gt;). However, these limitations are common for static analyses of statically typed languages and still allow to detect many problems regarding local variables and parameters.&lt;br /&gt;&lt;br /&gt;Usually, the analysis makes optimistic assumptions. For instance it can happen that a local variable receives the value of a method call or another non-local variable. In this situation the analysis assumes this value is neither null nor undefined. The same is true for function parameters. Only when there are distinct indications in the source code for a value of a local variable to be null or undefined, the analysis will issue a warning.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Guards&lt;/h3&gt;&lt;h3&gt; &lt;/h3&gt;Sometimes the programmer knows that a variable may be null or undefined and hence checks the variable explicitly, for instance using &lt;span&gt;if (v) {...}&lt;/span&gt;. As a result this check disables the warning in the then-branch that complies to the execution semantics.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-Pjtv74Dim8U/W3_CntUSe0I/AAAAAAAAAIM/ECKOxqI2d2khOrBgcpxIva02wlkcAtnhACEwYBhgL/s1600/No_Warning.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-Pjtv74Dim8U/W3_CntUSe0I/AAAAAAAAAIM/ECKOxqI2d2khOrBgcpxIva02wlkcAtnhACEwYBhgL/s1600/No_Warning.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;As shown in the screenshot above, neither at the expression &lt;span&gt;w.length &amp;lt; 1&lt;/span&gt; nor at the statement &lt;span&gt;return w.length&lt;/span&gt;; a warning is shown. Of course, the else-branch of such a check would consequently always indicate a warning when a property of variable &lt;span&gt;v&lt;/span&gt; is accessed. Checks for conditional expressions and binary logical expressions (e.g. &lt;span&gt;v &amp;amp;&amp;amp; v.length&lt;/span&gt;) are also supported. A reader might think: &quot;In case &lt;span&gt;w&lt;/span&gt; i&lt;span style=&quot;font-family: inherit;&quot;&gt;s null  the e&lt;/span&gt;xpression &lt;span&gt;w.length&lt;/span&gt; would fail.&quot; True, but in this example the analysis detects the value of &lt;span&gt;w&lt;/span&gt; being undefined. In ca&lt;span style=&quot;font-family: inherit;&quot;&gt;se null might&lt;/span&gt; have been assigned to &lt;span&gt;w&lt;/span&gt; e.g. in an if-condition before, the analysis will issue a warning of &lt;span&gt;w&lt;/span&gt; being null at the two &lt;span&gt;w.length&lt;/span&gt; expressions.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Data Flow&lt;/h3&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-y8LwrCo27Lw/W3_CnoC3pZI/AAAAAAAAAIQ/2B7jVp9SjqAqz-2TU1rg4gG3iDbdATlJgCEwYBhgL/s1600/Previous_Variable.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-y8LwrCo27Lw/W3_CnoC3pZI/AAAAAAAAAIQ/2B7jVp9SjqAqz-2TU1rg4gG3iDbdATlJgCEwYBhgL/s1600/Previous_Variable.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;/div&gt;There are situations where the value of a variable is null or undefined due to a previous assignment of a variable which may have been null or undefined before, like shown in the example above. Then, the null/undefined dereference problem occurs later when a property is accessed. Since the analysis respects data flow, it can follow the subsequent assignments. Hence a warning is shown at a property access indicating the null or undefined problem. Moreover, the warning also indicates the source of the null or undefined value which would be the variable &lt;span&gt;w&lt;/span&gt; in the example above.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The interested reader would find more details about the N4JS flow graphs and their implementation in the &lt;a href=&quot;https://github.com/eclipse/n4js/blob/master/docs/org.eclipse.n4js.design/chapters/10_flowgraphs/flowgraphs.adoc&quot; target=&quot;_blank&quot;&gt;N4JS Design Document, Chapter: Flow Graphs.&lt;/a&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 25 Nov 2018 11:18:03 +0000</pubDate>
	<author>noreply@blogger.com (Project N4JS)</author>
</item>
<item>
	<title>Chris Aniszczyk: First KubeCon CloudNativeCon in China</title>
	<guid isPermaLink="false">https://www.aniszczyk.org/?p=4251</guid>
	<link>https://www.aniszczyk.org/2018/11/15/first-kubecon-cloudnativecon-in-china/</link>
	<description>&lt;p&gt;After a week in Shanghai all I can say is wow, I’m truly humbled by the open source and cloud native community in China that showed up to support our &lt;a href=&quot;https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2018/&quot;&gt;first conference in China&lt;/a&gt;. I first want to thank the amazing CNCF events team and most importantly Janet Kuo and Liz Rice who acted as tireless program chairs for this first time event:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;And it's a wrap! Thank you everyone who attended, spoke at, or worked behind the scenes at &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/cloudnativecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudnativecon&lt;/a&gt; China! &lt;a href=&quot;https://t.co/F7MhKNxsyv&quot;&gt;pic.twitter.com/F7MhKNxsyv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Liz Rice @ KubeCon CloudNativeCon &lt;img alt=&quot;🇨🇳&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f1e8-1f1f3.png&quot; style=&quot;height: 1em;&quot; /&gt; (@lizrice) &lt;a href=&quot;https://twitter.com/lizrice/status/1063005669241032704?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I’ve had the fortunate/unfortunate experience of traveling to China 6 times in the last 12 months and it’s been an experience learning about the open source community here. Also it’s been hilarious learning all the new tools like WeChat, Didi, Ofo and so on to navigate life in China but I can save that for another time (DiDi jail is the worst). The CNCF has grown from a few members in China to about 40 which represents a little more than 10% of the CNCF total membership. &lt;span style=&quot;font-weight: 400;&quot;&gt;China is the third largest contributor to CNCF projects (in terms of contributors and committers) after the U.S. and Germany:&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;… also as a tidbit… as of recently China is the 3rd largest contributor to &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; projects across the board &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/cloudnativecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#cloudnativecon&lt;/a&gt; &lt;a href=&quot;https://t.co/ssdyNkKFNk&quot;&gt;https://t.co/ssdyNkKFNk&lt;/a&gt; &lt;a href=&quot;https://t.co/g1hyOxpUFq&quot;&gt;pic.twitter.com/g1hyOxpUFq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/1063281465268494336?ref_src=twsrc%5Etfw&quot;&gt;November 16, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Huawei and PingCap lead the way for Chinese companies with 34,000+ and 32,000+ contributions respectively, and are the fifth and sixth largest contributors overall. We also now host three CNCF projects that were effectively born in China: &lt;a href=&quot;https://github.com/dragonflyoss/Dragonfly&quot;&gt;Dragonfly&lt;/a&gt; (Alibaba), &lt;a href=&quot;https://github.com/goharbor/harbor&quot;&gt;Harbor&lt;/a&gt; (VMWare China) and &lt;a href=&quot;https://github.com/tikv/tikv&quot;&gt;TiKV&lt;/a&gt; (PingCap). I’m proud of the work the CNCF has done to facilitate project learnings across the world as China scale open source is a trend that will continue to grow (I plan on writing more about this soon as I finalize my thoughts).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I’m also proud to award JD.com our first &lt;a href=&quot;https://www.cncf.io/announcement/2018/11/14/jd-wins-top-end-user-award/&quot;&gt;End User Award in China&lt;/a&gt; for their cultivation of cloud native in China, they run one of the largest bare metal Kubernetes and &lt;a href=&quot;https://vitess.io/&quot;&gt;Vitess&lt;/a&gt; deployments in the world and have been very forthcoming in &lt;a href=&quot;https://www.cncf.io/blog/2018/08/02/qa-with-jd-com-kubernetes-cloud-native-and-cncf-projects-driving-big-data-and-ai/&quot;&gt;sharing&lt;/a&gt; the &lt;a href=&quot;https://kubernetes.io/blog/2017/02/inside-jd-com-shift-to-kubernetes-from-openstack/&quot;&gt;lessons&lt;/a&gt; around that experience:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Now &lt;a href=&quot;https://twitter.com/cra?ref_src=twsrc%5Etfw&quot;&gt;@cra&lt;/a&gt; announces the first End User Award &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; China to &lt;a href=&quot;https://twitter.com/hashtag/JD?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#JD&lt;/a&gt;.COM &lt;a href=&quot;https://twitter.com/linuxfoundation?ref_src=twsrc%5Etfw&quot;&gt;@linuxfoundation&lt;/a&gt; &lt;a href=&quot;https://t.co/K5bfrimZ31&quot;&gt;pic.twitter.com/K5bfrimZ31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Jeffrey Borek (@jeffborek) &lt;a href=&quot;https://twitter.com/jeffborek/status/1062901740612304896?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Here are some of my other favorite tweets and moments from the conference:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Great job by &lt;a href=&quot;https://twitter.com/derekmcgowan?ref_src=twsrc%5Etfw&quot;&gt;@derekmcgowan&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mikebrow?ref_src=twsrc%5Etfw&quot;&gt;@mikebrow&lt;/a&gt; on the &lt;a href=&quot;https://twitter.com/containerd?ref_src=twsrc%5Etfw&quot;&gt;@containerd&lt;/a&gt; deep dive. Could have used double the time and people still want to talk and ask questions! &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/uelBUxRAE6&quot;&gt;pic.twitter.com/uelBUxRAE6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Phil Estes (@estesp) &lt;a href=&quot;https://twitter.com/estesp/status/1062977306052964352?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Honored to have the opportunity to share the story of &lt;a href=&quot;https://twitter.com/hashtag/Kubernetes?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubernetes&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/lyft?ref_src=twsrc%5Etfw&quot;&gt;@lyft&lt;/a&gt; with the first ever &lt;a href=&quot;https://twitter.com/hashtag/kubecon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#kubecon&lt;/a&gt; China!&lt;/p&gt;
&lt;p&gt;It's also my first bilingual conference and the experience has been really cool! &lt;a href=&quot;https://t.co/sHVG3Axr5R&quot;&gt;pic.twitter.com/sHVG3Axr5R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Vicki Cheung (@vmcheung) &lt;a href=&quot;https://twitter.com/vmcheung/status/1062918769452949504?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Great seeing &lt;a href=&quot;https://twitter.com/annilai?ref_src=twsrc%5Etfw&quot;&gt;@annilai&lt;/a&gt; up on the keynote stage at &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; Shanghai talking about genome sequencing via containers and &lt;a href=&quot;https://twitter.com/hashtag/Kubernetes?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubernetes&lt;/a&gt; &lt;a href=&quot;https://t.co/dNTRAyJ3Du&quot;&gt;pic.twitter.com/dNTRAyJ3Du&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Brad Topol (@bradtopol) &lt;a href=&quot;https://twitter.com/bradtopol/status/1062896827635183616?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Listening to the first &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; keynote of the day: PhD Julia Han and Xin Zhang talking about how they're helping the State Grid of China solve difficult problems with &lt;a href=&quot;https://twitter.com/hashtag/MachineLearning?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#MachineLearning&lt;/a&gt; using &lt;a href=&quot;https://twitter.com/kubeflow?ref_src=twsrc%5Etfw&quot;&gt;@kubeflow&lt;/a&gt; &lt;img alt=&quot;🙌&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f64c.png&quot; style=&quot;height: 1em;&quot; /&gt; &lt;a href=&quot;https://t.co/q95h82BnSw&quot;&gt;pic.twitter.com/q95h82BnSw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Kubernetes Finland (@KubernetesFin) &lt;a href=&quot;https://twitter.com/KubernetesFin/status/1062886682670727168?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;I love seeing many VMware coworkers within the group of Harbor contributors being recognized in the &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; China keynote. Harbor is the first China originated CNCF project, just advanced from sandbox to incubating status &lt;a href=&quot;https://t.co/QwLqiPtahZ&quot;&gt;pic.twitter.com/QwLqiPtahZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Steve Wong (@cantbewong) &lt;a href=&quot;https://twitter.com/cantbewong/status/1062527803902447618?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Had an awesome conversation about binary authorization projects in-toto [&lt;a href=&quot;https://t.co/959vCU6XOE&quot;&gt;https://t.co/959vCU6XOE&lt;/a&gt;] and Grafeas &amp;amp; Kritis [&lt;a href=&quot;https://t.co/lC5X9ScGK4&quot;&gt;https://t.co/lC5X9ScGK4&lt;/a&gt;] at &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; China – nowhere else can you have these kinds of conversations–this is why I attend!&lt;/p&gt;
&lt;p&gt;— Christopher Hanson (@CloudNativChris) &lt;a href=&quot;https://twitter.com/CloudNativChris/status/1062532125994344448?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Also, massive kudos to the translators at &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; who have been ON POINT. The translator for the Service Mesh panel was capturing and relaying a boatload of technical details in a staggeringly fast amount of time.&lt;/p&gt;
&lt;p&gt;— George Miranda (@gmiranda23) &lt;a href=&quot;https://twitter.com/gmiranda23/status/1062981238682607616?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Tencent originally had something like Borg in 2009, migrated to Docker and k8s in 2013-14, Docker on Yarn in 2015, 2016-now is Tencent k8s engine. &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Justin Warren (@jpwarren) &lt;a href=&quot;https://twitter.com/jpwarren/status/1062893668191719424?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Keynote by ⁦&lt;a href=&quot;https://twitter.com/vmcheung?ref_src=twsrc%5Etfw&quot;&gt;@vmcheung&lt;/a&gt;⁩ of ⁦&lt;a href=&quot;https://twitter.com/lyft?ref_src=twsrc%5Etfw&quot;&gt;@lyft&lt;/a&gt;⁩ at &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; + &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; China. 40,000 EC2 instances and 300+ microservices. &lt;a href=&quot;https://t.co/2HGDb5brhS&quot;&gt;pic.twitter.com/2HGDb5brhS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Dan Kohn @ #KubeCon + #CloudNativeCon Shanghai (@dankohn1) &lt;a href=&quot;https://twitter.com/dankohn1/status/1062890401424494592?ref_src=twsrc%5Etfw&quot;&gt;November 15, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;in&quot;&gt;Kubernetes sugar painting! &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/5nOpfzvBug&quot;&gt;pic.twitter.com/5nOpfzvBug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Janet Kuo @ KubeCon CloudNativeCon (@janet_kuo) &lt;a href=&quot;https://twitter.com/janet_kuo/status/1062676802857025538?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/CloudNativeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CloudNativeCon&lt;/a&gt; China job board &lt;a href=&quot;https://t.co/9fsIyzhhRR&quot;&gt;pic.twitter.com/9fsIyzhhRR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/1062666208741416961?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/Kubernetes?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubernetes&lt;/a&gt; and college students, one reason why &lt;a href=&quot;https://twitter.com/hashtag/L10n?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#L10n&lt;/a&gt; matters &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/CloudNativeFdn?ref_src=twsrc%5Etfw&quot;&gt;@CloudNativeFdn&lt;/a&gt; &lt;a href=&quot;https://t.co/29BY3HIuMj&quot;&gt;pic.twitter.com/29BY3HIuMj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Zach Corleissen (@zachorsarah) &lt;a href=&quot;https://twitter.com/zachorsarah/status/1062654017271021569?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Docs translation sprint, day two—high energy, high creativity. Thanks, Chinese L10n contribs! &lt;img alt=&quot;🇨🇳&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f1e8-1f1f3.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;img alt=&quot;🌟&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f31f.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;a href=&quot;https://twitter.com/hashtag/Kubernetes?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Kubernetes&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/CNCF?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#CNCF&lt;/a&gt; &lt;a href=&quot;https://twitter.com/cra?ref_src=twsrc%5Etfw&quot;&gt;@cra&lt;/a&gt; &lt;a href=&quot;https://twitter.com/lucperkins?ref_src=twsrc%5Etfw&quot;&gt;@lucperkins&lt;/a&gt; &lt;a href=&quot;https://twitter.com/bradtopol?ref_src=twsrc%5Etfw&quot;&gt;@bradtopol&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hanjiayao929?ref_src=twsrc%5Etfw&quot;&gt;@hanjiayao929&lt;/a&gt; &lt;a href=&quot;https://t.co/iQeX7ZEOj4&quot;&gt;pic.twitter.com/iQeX7ZEOj4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Zach Corleissen (@zachorsarah) &lt;a href=&quot;https://twitter.com/zachorsarah/status/1062625760752525312?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;ht&quot;&gt;eBay cloud native scale! &lt;a href=&quot;https://twitter.com/hashtag/KubeCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#KubeCon&lt;/a&gt; &lt;a href=&quot;https://t.co/g0gXlbfarO&quot;&gt;pic.twitter.com/g0gXlbfarO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Vijay Dhama @Kubecon Shanghai (@vjdhama) &lt;a href=&quot;https://twitter.com/vjdhama/status/1062622524767260677?ref_src=twsrc%5Etfw&quot;&gt;November 14, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Anyway, thank you so much for everyone who attending and took a chance on our first event in China. I’m exhausted and heading for a long vacation but truly proud of the &lt;a href=&quot;https://www.cncf.io/people/staff/&quot;&gt;CNCF team&lt;/a&gt; and community for putting on an amazing event.&lt;/p&gt;</description>
	<pubDate>Fri, 16 Nov 2018 04:42:41 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Ditto Milestone 0.8.0-M3</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-11-14-milestone-announcement-080-M3.html</guid>
	<link>https://www.eclipse.org/ditto/2018-11-14-milestone-announcement-080-M3.html</link>
	<description>&lt;p&gt;Preparing the upcoming first release &lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.8.0&quot;&gt;0.8.0&lt;/a&gt; of 
Eclipse Ditto,  this milestone is a last checkpoint to ensure that the release will be performed smoothly.&lt;br /&gt;
Therefore, this milestone release primarily focuses on stabilization.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_080-M3.html&quot;&gt;0.8.0-M3 release notes&lt;/a&gt; for what changed in detail.&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; If you want to upgrade an existing Ditto installation, you’ll have to execute a small 
        database migration - see release notes.&lt;/div&gt;

&lt;p&gt;The main changes and new features are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;speed up of search index creation&lt;/li&gt;
  &lt;li&gt;applying enforcement of messages received via connections (e.g. from Eclipse Hono)&lt;/li&gt;
  &lt;li&gt;copying already existing policies when creating things&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 14 Nov 2018 05:00:00 +0000</pubDate>
</item>
<item>
	<title>Torkild Ulvøy Resheim: Timekeeper 2.0 beta now available</title>
	<guid isPermaLink="false">https://resheim.net/?p=1903</guid>
	<link>https://resheim.net/2018/11/timekeeper-2-0-beta-now-available.html</link>
	<description>&lt;p&gt;&lt;span class=&quot;wpsdc-drop-cap&quot;&gt;I&lt;/span&gt;t has been quite some time since the &lt;a href=&quot;https://github.com/turesheim/eclipse-timekeeper/releases/tag/v1.1.0&quot;&gt;last update of the Timekeeper for Eclipse plug-in&lt;/a&gt;. Having used it myself for a while I soon realized that the tool was promising, but there were some essential bits that had to be improved. So all this time I’ve been &lt;del&gt;mucking about&lt;/del&gt; carefully planning, developing and testing improvements.&lt;/p&gt;
&lt;p&gt;After I started using the excellent &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Installer&quot;&gt;&lt;i&gt;Eclipse Installer&lt;/i&gt;&lt;/a&gt; my workflow has changed&lt;i&gt;:&lt;/i&gt; For projects that I don’t work on very often, I typically create a new installation whenever I need it and scrap it when I’m done. Since the timekeeper data were stored in the &lt;i&gt;Mylyn Tasks&lt;/i&gt; metadata they would be lost once the installation and workspace got wiped. Sometimes I even have the same projects open in different workspaces, so the timekeeping data would be stored in different places.&lt;/p&gt;
&lt;p&gt;Some tasks are not easily resolved and I can spend a little time over several days on these, so I also wanted a way to track these activities and make short notes for each.&lt;/p&gt;
&lt;p&gt;The last bit I felt was missing was having the ability to customize reports and switch between i.e. different plain text or HTML summaries. Looking forward there it may even be possible to export to various other tools.&lt;/p&gt;
&lt;p&gt;In addition to fix a few bugs, I’ve addressed all of the above concerns in the upcoming release. This blog post attempts to make a summary of the most important changes.&lt;/p&gt;
&lt;h2&gt;Technologies used&lt;/h2&gt;
&lt;p&gt;As always with hobby projects there is an opportunity to learn. So when implementing these new features and improvements I wanted to make use of some APIs and technologies that I believe I should know more about. As a result the data is now stored in a &lt;a href=&quot;http://www.h2database.com/html/main.html&quot;&gt;H2&lt;/a&gt; SQL database, mapped to POJOs using the Java Persistence API with &lt;a href=&quot;https://www.eclipse.org/eclipselink/#jpa&quot;&gt;EclipseLink&lt;/a&gt;. Establishing the baseline and migration to a new version of the database is handled using &lt;a href=&quot;https://flywaydb.org&quot;&gt;Flyway&lt;/a&gt;, and finally; reports are generated using &lt;a href=&quot;https://freemarker.apache.org&quot;&gt;Apache FreeMarker&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Database configuration&lt;/h2&gt;
&lt;p&gt;The Database configuration page in preferences (&lt;b&gt;Timekeeper &amp;gt; Database&lt;/b&gt;) allows you to configure where the database for the current Eclipse instance should be kept. The default is to place it in the shared location, under &lt;i&gt;.timekeeper&lt;/i&gt; in your home folder. But you can also use a workspace relative path, or even a H2 server if you have one running.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i1.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Database-configuration.png?ssl=1&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1905&quot; height=&quot;348&quot; src=&quot;https://i1.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Database-configuration.png?resize=644%2C348&amp;amp;ssl=1&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Multiple instances of the Timekeeper can share the database as it utilizes a H2 feature called &lt;a href=&quot;http://h2database.com/html/features.html#auto_mixed_mode&quot;&gt;mixed mode&lt;/a&gt;. This will automatically start a server instance on port 9090 if more connections are needed.&lt;/p&gt;
&lt;p&gt;The &lt;b&gt;Export&lt;/b&gt; and &lt;b&gt;Import&lt;/b&gt; buttons are used for exactly that. CSV files, one for each table, are created once a destination folder has been selected. Note that when importing, the data is merged with what’s already in the database. So if you at some time want to start with a clean sheet, it you will have to delete the database files while no Timekeeper instance is up and running.&lt;/p&gt;
&lt;h2&gt;Recording task activity&lt;/h2&gt;
&lt;p&gt;As you might notice from the screenshot below, there are now &lt;i&gt;activities&lt;/i&gt; associated with each task. Each activity has a start time and a stop time that can be manually edited. While as before you could only assign a number of hours to each task.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i1.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Activity-view.png?ssl=1&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1907&quot; height=&quot;344&quot; src=&quot;https://i1.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Activity-view.png?resize=644%2C344&amp;amp;ssl=1&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Local task repositories&lt;/i&gt; are just that. So each task is assigned a number in sequence. That won’t work by itself when storing local task information in the database, so for each workspace an identifier is created to keep track of activities related to a local task. If you wipe the workspace these are lost, however they still exist in the database so you could retrieve them if you really wanted to.&lt;/p&gt;
&lt;h2&gt;Reports&lt;/h2&gt;
&lt;p&gt;The only report templates that are already in place are quite simple. There are two HTML versions, one using Font Awesome for some eye candy, and the other without. Both basically replicate the “workweek” view.&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;Configuring Report templates&lt;/b&gt;&lt;/h2&gt;
&lt;p&gt;The report templates have their own configuration page in the preferences (&lt;b&gt;Timekeeper &amp;gt; Report Templates&lt;/b&gt;). Here you can add your own templates or modify the existing ones. The source editor has very basic support for FreeMarker syntax highlighting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i0.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Template-configuration.png?ssl=1&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1908&quot; height=&quot;579&quot; src=&quot;https://i0.wp.com/resheim.net/wordpress/wp-content/uploads/2018/10/Template-configuration.png?resize=644%2C579&amp;amp;ssl=1&quot; width=&quot;644&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently there is support for three different content types: &lt;em&gt;HTML&lt;/em&gt;, &lt;em&gt;plain text&lt;/em&gt; and &lt;em&gt;Rich Text Format&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The default template is the one used when simply pressing the report toolbar button in the workweek view. Activating the pulldown menu will show all templates, allowing you to select the one you want.&lt;/p&gt;
&lt;p&gt;There is currently no documentation on how to use the various functions and data structures in the report engine. Please examine the existing templates for now if attempting to do modifications or create your own.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I think the new features added to the Timekeeper plugin to Eclipse makes it much more usable, now it’s only a matter of ironing out the &lt;a href=&quot;https://github.com/turesheim/eclipse-timekeeper/milestone/4&quot;&gt;bugs&lt;/a&gt;. It appears fairly stable, but there may still be issues that I have not noticed even after weeks of use. Such a large rewrite is a bit scary. In any case, I’m releasing a beta-version now so that those of you interested can give it a spin. You can point your Eclipse plug-in installer UI to &lt;a href=&quot;https://resheim.net/p2/eclipse-timekeeper_beta/&quot;&gt;https://resheim.net/p2/eclipse-timekeeper_beta/&lt;/a&gt; and take it from there.&lt;/p&gt;
&lt;p&gt;If you want more details, the project code is found at &lt;a href=&quot;https://github.com/turesheim/eclipse-timekeeper&quot;&gt;https://github.com/turesheim/eclipse-timekeeper&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;twitter-share&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/intent/tweet?url=https%3A%2F%2Fresheim.net%2F2018%2F11%2Ftimekeeper-2-0-beta-now-available.html&amp;amp;via=torkildr&amp;amp;related=torkildr%3ATorkild&quot;&gt;Tweet&lt;/a&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 11 Nov 2018 13:24:14 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Hosted Services Privacy and Acceptable Usage Policy</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/INyihbgYe10/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/INyihbgYe10/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy</link>
	<description>The Eclipse Foundation recently made available a new policy to make sure that our projects and hosted services are compliant with the General Data Protection Regulation (GDPR).&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/INyihbgYe10&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Nov 2018 16:15:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Specification Process, Part I: The EDP</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/5HGN_wF93N8/eclipse-foundation-specification-process-part-i-edp</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/5HGN_wF93N8/eclipse-foundation-specification-process-part-i-edp</link>
	<description>A quick Eclipse Development Process (EDP) primer.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/5HGN_wF93N8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 08 Nov 2018 16:15:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Eclipse Foundation Hosted Services Privacy and Acceptable Usage Policy</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy/</guid>
	<link>https://www.chrisguindon.com/post/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy/</link>
	<description>&lt;p&gt;The Eclipse Foundation recently made available a new &lt;a href=&quot;https://www.eclipse.org/org/documents/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy.pdf&quot;&gt;policy&lt;/a&gt;
to make sure that our projects and hosted services are compliant with
the General Data Protection Regulation (GDPR).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/org/documents/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy.pdf&quot;&gt;Eclipse Foundation Hosted Services Privacy and Acceptable Usage Policy&lt;/a&gt; will provide guidance to folks who operate a virtual server or a website hosted either directly
by the Eclipse Foundation or provided via the Eclipse Foundation’s funding in support
of an Eclipse Foundation open source project.&lt;/p&gt;

&lt;p&gt;We want to ensure that all such services meet the highest standards of privacy and transparency,
and to ensure that any collected data is used strictly in support of the activities of its open source projects.&lt;/p&gt;

&lt;p&gt;There are two changes that we would like to highlight. First &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=534384#c6&quot;&gt;we have updated our position&lt;/a&gt;
on &lt;a href=&quot;https://analytics.google.com/analytics/web/&quot;&gt;Google Analytics (GA)&lt;/a&gt;. Projects will now be allowed to create their own GA property,
provided they agree to the conditions listed in our new &lt;a href=&quot;https://www.eclipse.org/org/documents/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy.pdf&quot;&gt;policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly we are better defining the responsibilities of the projects or committers
responsible for hosting a service or website with the Eclipse Foundation.&lt;/p&gt;

&lt;p&gt;Hosted services and Eclipse Projects can adopt this new policy by creating an issue on Eclipse Bugzilla under &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Community&amp;amp;component=Hosted%20Services%20Privacy%20and%20Acceptable%20Usage%20Policy&quot;&gt;Community &amp;gt; Hosted Services Privacy and Acceptable Usage Policy&lt;/a&gt;
where they acknowledge reading and understanding the policy.&lt;/p&gt;

&lt;p&gt;Those who wish to store Personally Identifiable Information (PII) must create and include a Data Protection Impact Assessment (DPIA) document.
The DPIA must describe what kinds of PII data will be collected and their purpose. This will have to be updated as your services evolve by
uploading a new version on Eclipse Bugzilla.&lt;/p&gt;

&lt;p&gt;If a service wishes to retain PII for longer than 1 year, they must produce a &lt;a href=&quot;https://www.chrisguindon.com/post/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy/data-retention-policy-template.pdf&quot;&gt;Data
Retention Policy (DRP)&lt;/a&gt; that indicates how long they plan to keep each pieces of PII data
and why they need to keep them for that long.&lt;/p&gt;

&lt;p&gt;For the complete list of requirements &amp;amp; conditions, please make sure to read the &lt;a href=&quot;https://www.eclipse.org/org/documents/eclipse-foundation-hosted-services-privacy-and-acceptable-usage-policy.pdf&quot;&gt;Eclipse Foundation Hosted Services Privacy and Acceptable Usage Policy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please let us know if you have any questions or concerns regarding this new policy by sending
your questions to &lt;a href=&quot;mailto:privacy@eclipse.org&quot;&gt;privacy@eclipse.org&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 07 Nov 2018 20:30:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process, Part I: The EDP</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5454</guid>
	<link>https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/</link>
	<description>&lt;p&gt;The Eclipse Foundation Specification Process (EFSP) was authored as an extension to the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP). With this in mind, before we can discuss the EFSP, we’ll start with a quick EDP primer.&lt;/p&gt;
&lt;p&gt;At a high (and very simplified) level, the EDP looks a little something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;edp_lifecycle&quot; class=&quot;alignnone size-full wp-image-5457 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/11/edp_lifecycle1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;All open source projects at the Eclipse Foundation &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#starting&quot;&gt;start life&lt;/a&gt; as a &lt;em&gt;proposal&lt;/em&gt;. A proposal literally proposes the creation of a new open source project: the proposal document suggests a name for the new project, and defines many things, including a description and scope of work. The proposal also serves as the nomination and election of all project committers and project leads.&lt;/p&gt;
&lt;p&gt;The proposal is posted for community feedback for a minimum of two weeks; during that time, the Eclipse Foundation staff works behind the scenes to ensure that the project’s name can be claimed as a trademark, a mentor has been identified, the licensing scheme works, and more. The community feedback period ends with a &lt;em&gt;creation review&lt;/em&gt; which lasts for a minimum of one week. The creation review is the last opportunity for the community and the members of the Eclipse Foundation to provide feedback and express concerns regarding the project.&lt;/p&gt;
&lt;p&gt;After successful completion of the creation review, and the project resources have been provisioned by the Eclipse Webmaster team, the project team engages in development. Project &lt;em&gt;committers&lt;/em&gt; push code to into the project’s source code repositories, and produce and disseminate &lt;em&gt;milestone&lt;/em&gt; (snapshot) builds to solicit feedback as part of an iterative development process.&lt;/p&gt;
&lt;p&gt;When the time comes to deliver a formal &lt;em&gt;release&lt;/em&gt;, the project team produces release candidates and engages in a &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release-review&quot;&gt;release review&lt;/a&gt;&lt;/em&gt;. A release review provides an opportunity for the project team to demonstrate to their &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#4_6_1_PMC&quot;&gt;Project Management Committee&lt;/a&gt; (PMC) that their content is ready for release, work with the Eclipse Intellectual Property Team to ensure that all of the required IP due diligence has been completed successfully, and give the community and membership a final opportunity provide feedback and express concerns. Following a successful release review, the project team will push out their final (GA) build and announce the official release to their community via established channels.&lt;/p&gt;
&lt;p&gt;The proposal serves as the first plan for the new open source project. Subsequent releases start with the creation of some sort of plan before reengaging in the development (release) cycle. The level of formality in the planning process varies by project. For many projects, the plan is little more than an acknowledgement that further development is needed. But for some projects, planning is a well-defined open process by which the committers work with their communities to identify themes and issues that will be addressed by the release.&lt;/p&gt;
&lt;p&gt;In my next post, I’ll discuss how this process is extended by the the EFSP. Then, I’ll start digging into the details.&lt;/p&gt;
&lt;p&gt;You can find the community draft of the Eclipse Foundation Specification Process &lt;a href=&quot;https://docs.google.com/document/d/1ongNUyGvZPtrcuxA7RQNV2qBESFcAphQbzdk3pUIQ5s/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 07 Nov 2018 15:47:44 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Updating Contributor and Committer Agreements</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/LSGG8KaWokY/new-eclipse-foundation-committer-and-contributor-agreements</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/LSGG8KaWokY/new-eclipse-foundation-committer-and-contributor-agreements</link>
	<description>See Mike Milinkovich's blog explaining the upcoming changes to these agreements and what steps are being taken to implement the update&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/LSGG8KaWokY&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 05 Nov 2018 19:15:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: New Eclipse Foundation Committer and Contributor Agreements</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1470</guid>
	<link>https://eclipse-foundation.blog/2018/11/05/new-eclipse-foundation-committer-and-contributor-agreements/</link>
	<description>&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; to see redline versions of the changes to the documents discussed below, please visit this &lt;a href=&quot;https://eclipse-foundation.blog/contribution-committer-agreements/&quot;&gt;contribution and committer agreements&lt;/a&gt; page.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Over my almost 15 years of sharing updates about what’s going on at Eclipse, some blogs are more important than others.  &lt;b&gt;This one is important&lt;/b&gt; &lt;b&gt;as it requires action by our members, committers, and contributors&lt;/b&gt;!  There is a lot of ground to cover explaining what’s going on and why we’re changing things, so please forgive me for a longer than normal post.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;tl;dr.  The Eclipse Foundation is starting to develop specifications. First for Jakarta EE, but soon for other areas as well. We want to make it clear that contributions to our open source projects may someday be used to create a specification, because we believe in code-first innovation. We also believe that if you’re contributing to open source, you &lt;i&gt;want &lt;/i&gt;your contributions to be used for open purposes, including specs.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;We are updating our standard contributor and committer agreements, and we will be requiring all our committers and contributors, as well as those members who have member committer agreements,  to re-sign their agreement with us.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;To make this happen, we will be reaching out to everyone who needs to re-sign.  You don’t have to do anything yet – just be aware the change is coming, and please act when we do make contact with you.&lt;/p&gt;
&lt;p&gt;First, a bit of background.  All contributions and commits made to any Eclipse Foundation project are covered by one of three distinct agreements – the &lt;a href=&quot;http://www.eclipse.org/legal/committer_process/EclipseMemberCommitterAgreementFinal.pdf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Member Committer Agreement&lt;/a&gt;, the &lt;a href=&quot;http://www.eclipse.org/legal/committer_process/EclipseIndividualCommitterAgreementFinal.pdf&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Individual Committer Agreement&lt;/a&gt;, or the &lt;a href=&quot;http://www.eclipse.org/legal/ECA.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Contributor Agreement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These agreements basically say that if you contribute to an Eclipse project, your contributions are being made under the license of the project. That license is usually the Eclipse Public License, but about 20% of our projects using additional or alternate licenses such as the Apache License, BSD, or MIT. It is important to note that the way things work at the Eclipse Foundation, the Foundation itself does not acquire any rights to the contributions. This is very different from other organizations like the FSF, OpenJDK, or the Apache Software Foundation. Eclipse uses a licensing model sometimes referred to as symmetrical inbound/outbound licensing, where contributors license their code directly to the users (recipients) of their contributions. Our approach requires us to ensure that all of our contribution agreements provide all necessary grants because we at the EF don’t have any rights to re-license contributions.&lt;/p&gt;
&lt;p&gt;As most are aware, Eclipse is now about to start hosting specifications as open source projects.  This is very exciting for us, and we think it represents a new opportunity for creating innovative specifications using a vendor neutral process.  The first specification projects will be a part of the Jakarta EE initiative, but we expect other specification projects to follow shortly.&lt;/p&gt;
&lt;p&gt;Everyone expected to re-sign one of these is encouraged to ensure they understand the details of the agreements and to seek their own legal advice. However, the change we have made is basically to ensure the copyrights in contributions to Eclipse projects may be used in specifications as well. (For the lawyers in the crowd, please note that these additional grants do &lt;i&gt;not &lt;/i&gt;include patents.) We certainly expect that our committers and contributors are fine with this concept. In fact, I assume that most folks would have expected that this was already obvious when they contributed to an open source project. To that, all I can say is….ahhhh…the lawyers made us do it.&lt;/p&gt;
&lt;p&gt;The new agreements are &lt;a href=&quot;http://www.eclipse.org/legal/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;already posted&lt;/a&gt;, so they are in immediate effect for new contributors and committers. Since we need to overhaul our contribution agreements, we are also taking this opportunity to fix a few things. In particular, our committers will know that up until now they’ve been required to be covered by both a committer agreement and the ECA. We’re going to fix that, so if you sign an Individual Committer Agreement, or are covered by your employer’s Member Committer Agreement, you will no longer have to personally sign an ECA. We are also going to implementing electronic signatures for ICAs using HelloSign. So going forward there is going to be a little less paper involved in being a committer. Yay!&lt;/p&gt;
&lt;p&gt;We’re sensitive that asking our contributors and committers to ‘update their paperwork’, especially if they’re not working on a specification, is – well, a pain in the backside.  But we’re hoping everyone will be supportive and understanding, and recognize that we take IP very seriously, and it’s one of the real value propositions of working with Eclipse.&lt;/p&gt;
&lt;p&gt;Contributors who have an ECA will see them revoked over the coming months, and will be asked to re-sign the new one. We will be starting first with the contributors to the EE4J projects, since they are the ones who are most likely to have contributions flowing into Jakarta EE specifications.&lt;/p&gt;
&lt;p&gt;Executing this change represents a massive effort for our team, as it literally means updating hundreds of committer agreements.  Our staff will be emailing individually each individual and member company needing to update their agreement with us, but we will be spread it over a period of the next few months.  So don’t be surprised if you don’t get an email for a while – we will get to everyone as soon as we can.&lt;/p&gt;
&lt;p&gt;Stay tuned for emails on this subject that will be sent to our various mailing lists with more details.  If you have questions, feel free to reach out to us at &lt;a href=&quot;mailto:license@eclipse.org&quot;&gt;license@eclipse.org &lt;/a&gt;and we’ll do our best to provide answers.&lt;/p&gt;
&lt;p&gt;I thank our entire community in advance for accommodating this significant change.  We are excited about the Eclipse Foundation hosting an even more vibrant collection of projects, and believe hosting open source specification projects is a great step forward in our evolution!&lt;/p&gt;</description>
	<pubDate>Mon, 05 Nov 2018 18:27:49 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Publishes MicroProfile eBook</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/tlSWgOAI3c4/Eclipse-Foundation-Publishes-MicroProfile-eBook.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/tlSWgOAI3c4/Eclipse-Foundation-Publishes-MicroProfile-eBook.html</link>
	<description>15 page executive guide sets context for enterprises evaluating MicroProfile &amp;amp; enterprise Java microservices for digital transformation&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/tlSWgOAI3c4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 05 Nov 2018 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Participate in the 2018 Eclipse Foundation Brand Survey</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/ZBGpN8epIaA/participate-2018-eclipse-foundation-brand-survey</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/ZBGpN8epIaA/participate-2018-eclipse-foundation-brand-survey</link>
	<description>We are excited to launch the 2018 edition of our brand survey!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/ZBGpN8epIaA&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 05 Nov 2018 15:45:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Halloween Kata Solutions</title>
	<guid isPermaLink="false">https://medium.com/p/36f6d92ac736</guid>
	<link>https://medium.com/@donraab/halloween-kata-solutions-36f6d92ac736?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Here are my solutions to the &lt;a href=&quot;https://medium.com/@donraab/trick-or-treat-a-halloween-kata-d469e1400d48&quot;&gt;Halloween Kata&lt;/a&gt; using &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; APIs.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/946/1*WHxixmrLvY5i29owQJ1uGQ.png&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;Top Candy&lt;/h3&gt;&lt;p&gt;For the solutions, I used &lt;em&gt;flatCollect&lt;/em&gt;, &lt;em&gt;toBag&lt;/em&gt;, &lt;em&gt;topOccurrences&lt;/em&gt;, &lt;em&gt;collect&lt;/em&gt;, &lt;em&gt;toSet&lt;/em&gt;, &lt;em&gt;reduce&lt;/em&gt; and &lt;em&gt;intersect&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void topCandy()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Bag&amp;lt;Candy&amp;gt;&amp;gt; bagsOfCandy =&lt;br /&gt;            this.collectBagsOfCandy();&lt;br /&gt;&lt;br /&gt;    &lt;em&gt;// Hint: Flatten the Bags of Candy into a single Bag&lt;br /&gt;    &lt;/em&gt;Bag&amp;lt;Candy&amp;gt; bigBagOfCandy =&lt;br /&gt;            bagsOfCandy.flatCollect(bag -&amp;gt; bag).toBag();&lt;br /&gt;&lt;br /&gt;    &lt;em&gt;// Hint: Find the top occurrence in the bag and convert that&lt;br /&gt;    // to a set.&lt;br /&gt;    &lt;/em&gt;MutableSet&amp;lt;Candy&amp;gt; mostCommon =&lt;br /&gt;            bigBagOfCandy.topOccurrences(1)&lt;br /&gt;                    .collect(ObjectIntPair::getOne)&lt;br /&gt;                    .toSet();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(Candy.&lt;strong&gt;&lt;em&gt;REESES_PIECES&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            mostCommon);&lt;br /&gt;&lt;br /&gt;    &lt;em&gt;// Hint: Find the top 10 occurrences of Candy in each of the&lt;br /&gt;    // bags and intersect them.&lt;br /&gt;    &lt;/em&gt;MutableSet&amp;lt;Candy&amp;gt; commonInTop10 =&lt;br /&gt;            bagsOfCandy.collect(&lt;br /&gt;                    bag -&amp;gt; bag.topOccurrences(10)&lt;br /&gt;                            .collect(ObjectIntPair::getOne)&lt;br /&gt;                            .toSet())&lt;br /&gt;                    .reduce(MutableSet::intersect)&lt;br /&gt;                    .get();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(Candy.&lt;strong&gt;&lt;em&gt;REESES_PIECES&lt;/em&gt;&lt;/strong&gt;, Candy.&lt;strong&gt;&lt;em&gt;CRUNCH&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;            commonInTop10);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in Kata&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#flatCollect-org.eclipse.collections.api.block.function.Function-&quot;&gt;flatCollect&lt;/a&gt; — flattens a nested collection of collections based on some attribute specified in a Function.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#toBag--&quot;&gt;toBag&lt;/a&gt; — converts a collection to a Bag.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html#topOccurrences-int-&quot;&gt;topOccurrences&lt;/a&gt; — find the top occurrences of items in a Bag based on their counts. The List returned will be bigger than the specified count requested if there are any ties.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#collect-org.eclipse.collections.api.block.function.Function-&quot;&gt;collect&lt;/a&gt; — transforms a collection from one type to another using a specified Function.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#toSet--&quot;&gt;toSet&lt;/a&gt; — converts a collection to a Set.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#reduce-java.util.function.BinaryOperator-&quot;&gt;reduce&lt;/a&gt; — applies a BinaryOperator to all elements of the collection, in this case a call to intersect two sets.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/set/MutableSet.html#intersect-org.eclipse.collections.api.set.SetIterable-&quot;&gt;intersect&lt;/a&gt; — returns the result of intersecting two sets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=36f6d92ac736&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 05 Nov 2018 00:01:15 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF 3.14.4 released</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-8940993367246153111</guid>
	<link>http://eclipseecf.blogspot.com/2018/11/ecf-3144-released.html</link>
	<description>ECF 3.14.4 was recently &lt;a href=&quot;http://www.eclipse.org/ecf/downloads.php&quot;&gt;released&lt;/a&gt;.  This was a bug-fix release.  There are notes on some of the recent additions &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/10/ecf-3143-released.html&quot;&gt;here&lt;/a&gt;.</description>
	<pubDate>Sun, 04 Nov 2018 18:00:30 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>

</channel>
</rss>
